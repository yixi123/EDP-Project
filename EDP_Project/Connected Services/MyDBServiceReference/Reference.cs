//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDP_Project.MyDBServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/MyDBService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Branch", Namespace="http://schemas.datacontract.org/2004/07/MyDBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Branch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShopNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShopName {
            get {
                return this.ShopNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShopNameField, value) != true)) {
                    this.ShopNameField = value;
                    this.RaisePropertyChanged("ShopName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/MyDBService.Entity")]
    [System.SerializableAttribute()]
    public partial class Review : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid BranchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateEditedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumReportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BranchId {
            get {
                return this.BranchIdField;
            }
            set {
                if ((this.BranchIdField.Equals(value) != true)) {
                    this.BranchIdField = value;
                    this.RaisePropertyChanged("BranchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateEdited {
            get {
                return this.DateEditedField;
            }
            set {
                if ((this.DateEditedField.Equals(value) != true)) {
                    this.DateEditedField = value;
                    this.RaisePropertyChanged("DateEdited");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumReport {
            get {
                return this.NumReportField;
            }
            set {
                if ((this.NumReportField.Equals(value) != true)) {
                    this.NumReportField = value;
                    this.RaisePropertyChanged("NumReport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyDBServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        EDP_Project.MyDBServiceReference.CompositeType GetDataUsingDataContract(EDP_Project.MyDBServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<EDP_Project.MyDBServiceReference.CompositeType> GetDataUsingDataContractAsync(EDP_Project.MyDBServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctShopNameFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctShopNameFromBranchResponse")]
        string[] SelectDistinctShopNameFromBranch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctShopNameFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctShopNameFromBranchResponse")]
        System.Threading.Tasks.Task<string[]> SelectDistinctShopNameFromBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctLocationFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctLocationFromBranchResponse")]
        System.Data.DataSet SelectDistinctLocationFromBranch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectDistinctLocationFromBranch", ReplyAction="http://tempuri.org/IService1/SelectDistinctLocationFromBranchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctLocationFromBranchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFromBranch", ReplyAction="http://tempuri.org/IService1/SearchFromBranchResponse")]
        System.Data.DataSet SearchFromBranch(string search, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFromBranch", ReplyAction="http://tempuri.org/IService1/SearchFromBranchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchFromBranchAsync(string search, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByIdFromBranch", ReplyAction="http://tempuri.org/IService1/SelectByIdFromBranchResponse")]
        EDP_Project.MyDBServiceReference.Branch SelectByIdFromBranch(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByIdFromBranch", ReplyAction="http://tempuri.org/IService1/SelectByIdFromBranchResponse")]
        System.Threading.Tasks.Task<EDP_Project.MyDBServiceReference.Branch> SelectByIdFromBranchAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSearch", ReplyAction="http://tempuri.org/IService1/CreateSearchResponse")]
        int CreateSearch(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSearch", ReplyAction="http://tempuri.org/IService1/CreateSearchResponse")]
        System.Threading.Tasks.Task<int> CreateSearchAsync(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromSearch", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromSearchResponse")]
        System.Data.DataSet SelectByCustomerIdFromSearch(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromSearch", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromSearchAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromSearch", ReplyAction="http://tempuri.org/IService1/HaveDateFromSearchResponse")]
        int HaveDateFromSearch(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromSearch", ReplyAction="http://tempuri.org/IService1/HaveDateFromSearchResponse")]
        System.Threading.Tasks.Task<int> HaveDateFromSearchAsync(string searchString, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSearch", ReplyAction="http://tempuri.org/IService1/UpdateSearchResponse")]
        int UpdateSearch(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSearch", ReplyAction="http://tempuri.org/IService1/UpdateSearchResponse")]
        System.Threading.Tasks.Task<int> UpdateSearchAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromSearch", ReplyAction="http://tempuri.org/IService1/DeleteFromSearchResponse")]
        int DeleteFromSearch(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromSearch", ReplyAction="http://tempuri.org/IService1/DeleteFromSearchResponse")]
        System.Threading.Tasks.Task<int> DeleteFromSearchAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertView", ReplyAction="http://tempuri.org/IService1/InsertViewResponse")]
        int InsertView(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertView", ReplyAction="http://tempuri.org/IService1/InsertViewResponse")]
        System.Threading.Tasks.Task<int> InsertViewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromView", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromViewResponse")]
        System.Data.DataSet SelectByCustomerIdFromView(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromView", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromViewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromViewAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromView", ReplyAction="http://tempuri.org/IService1/HaveDateFromViewResponse")]
        int HaveDateFromView(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveDateFromView", ReplyAction="http://tempuri.org/IService1/HaveDateFromViewResponse")]
        System.Threading.Tasks.Task<int> HaveDateFromViewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateView", ReplyAction="http://tempuri.org/IService1/UpdateViewResponse")]
        int UpdateView(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateView", ReplyAction="http://tempuri.org/IService1/UpdateViewResponse")]
        System.Threading.Tasks.Task<int> UpdateViewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromView", ReplyAction="http://tempuri.org/IService1/DeleteFromViewResponse")]
        int DeleteFromView(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFromView", ReplyAction="http://tempuri.org/IService1/DeleteFromViewResponse")]
        System.Threading.Tasks.Task<int> DeleteFromViewAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertReview", ReplyAction="http://tempuri.org/IService1/InsertReviewResponse")]
        int InsertReview(double rating, string comment, string title, System.Guid customerId, System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertReview", ReplyAction="http://tempuri.org/IService1/InsertReviewResponse")]
        System.Threading.Tasks.Task<int> InsertReviewAsync(double rating, string comment, string title, System.Guid customerId, System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByBranchIdFromReviewResponse")]
        System.Data.DataSet SelectByBranchIdFromReview(System.Guid id, System.Guid customerId, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByBranchIdFromReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByBranchIdFromReviewAsync(System.Guid id, System.Guid customerId, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectAllByBranchIdFromReviewResponse")]
        System.Data.DataSet SelectAllByBranchIdFromReview(System.Guid id, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectAllByBranchIdFromReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBranchIdFromReviewAsync(System.Guid id, string sort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveExistingReview", ReplyAction="http://tempuri.org/IService1/HaveExistingReviewResponse")]
        EDP_Project.MyDBServiceReference.Review HaveExistingReview(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/HaveExistingReview", ReplyAction="http://tempuri.org/IService1/HaveExistingReviewResponse")]
        System.Threading.Tasks.Task<EDP_Project.MyDBServiceReference.Review> HaveExistingReviewAsync(System.Guid branchId, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateReview", ReplyAction="http://tempuri.org/IService1/UpdateReviewResponse")]
        int UpdateReview(int id, string title, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateReview", ReplyAction="http://tempuri.org/IService1/UpdateReviewResponse")]
        System.Threading.Tasks.Task<int> UpdateReviewAsync(int id, string title, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteReview", ReplyAction="http://tempuri.org/IService1/DeleteReviewResponse")]
        int DeleteReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteReview", ReplyAction="http://tempuri.org/IService1/DeleteReviewResponse")]
        System.Threading.Tasks.Task<int> DeleteReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromReviewResponse")]
        System.Data.DataSet SelectByCustomerIdFromReview(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectByCustomerIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectByCustomerIdFromReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromReviewAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRatingByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectRatingByBranchIdFromReviewResponse")]
        double SelectRatingByBranchIdFromReview(System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectRatingByBranchIdFromReview", ReplyAction="http://tempuri.org/IService1/SelectRatingByBranchIdFromReviewResponse")]
        System.Threading.Tasks.Task<double> SelectRatingByBranchIdFromReviewAsync(System.Guid branchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectReportedReview", ReplyAction="http://tempuri.org/IService1/SelectReportedReviewResponse")]
        System.Data.DataSet SelectReportedReview();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectReportedReview", ReplyAction="http://tempuri.org/IService1/SelectReportedReviewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectReportedReviewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNumReportToReview", ReplyAction="http://tempuri.org/IService1/AddNumReportToReviewResponse")]
        int AddNumReportToReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNumReportToReview", ReplyAction="http://tempuri.org/IService1/AddNumReportToReviewResponse")]
        System.Threading.Tasks.Task<int> AddNumReportToReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetNumReportToReview", ReplyAction="http://tempuri.org/IService1/ResetNumReportToReviewResponse")]
        int ResetNumReportToReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetNumReportToReview", ReplyAction="http://tempuri.org/IService1/ResetNumReportToReviewResponse")]
        System.Threading.Tasks.Task<int> ResetNumReportToReviewAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EDP_Project.MyDBServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EDP_Project.MyDBServiceReference.IService1>, EDP_Project.MyDBServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public EDP_Project.MyDBServiceReference.CompositeType GetDataUsingDataContract(EDP_Project.MyDBServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<EDP_Project.MyDBServiceReference.CompositeType> GetDataUsingDataContractAsync(EDP_Project.MyDBServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string[] SelectDistinctShopNameFromBranch() {
            return base.Channel.SelectDistinctShopNameFromBranch();
        }
        
        public System.Threading.Tasks.Task<string[]> SelectDistinctShopNameFromBranchAsync() {
            return base.Channel.SelectDistinctShopNameFromBranchAsync();
        }
        
        public System.Data.DataSet SelectDistinctLocationFromBranch() {
            return base.Channel.SelectDistinctLocationFromBranch();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectDistinctLocationFromBranchAsync() {
            return base.Channel.SelectDistinctLocationFromBranchAsync();
        }
        
        public System.Data.DataSet SearchFromBranch(string search, string location) {
            return base.Channel.SearchFromBranch(search, location);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchFromBranchAsync(string search, string location) {
            return base.Channel.SearchFromBranchAsync(search, location);
        }
        
        public EDP_Project.MyDBServiceReference.Branch SelectByIdFromBranch(System.Guid id) {
            return base.Channel.SelectByIdFromBranch(id);
        }
        
        public System.Threading.Tasks.Task<EDP_Project.MyDBServiceReference.Branch> SelectByIdFromBranchAsync(System.Guid id) {
            return base.Channel.SelectByIdFromBranchAsync(id);
        }
        
        public int CreateSearch(string searchString, System.Guid customerId) {
            return base.Channel.CreateSearch(searchString, customerId);
        }
        
        public System.Threading.Tasks.Task<int> CreateSearchAsync(string searchString, System.Guid customerId) {
            return base.Channel.CreateSearchAsync(searchString, customerId);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromSearch(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromSearch(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromSearchAsync(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromSearchAsync(customerId);
        }
        
        public int HaveDateFromSearch(string searchString, System.Guid customerId) {
            return base.Channel.HaveDateFromSearch(searchString, customerId);
        }
        
        public System.Threading.Tasks.Task<int> HaveDateFromSearchAsync(string searchString, System.Guid customerId) {
            return base.Channel.HaveDateFromSearchAsync(searchString, customerId);
        }
        
        public int UpdateSearch(int id) {
            return base.Channel.UpdateSearch(id);
        }
        
        public System.Threading.Tasks.Task<int> UpdateSearchAsync(int id) {
            return base.Channel.UpdateSearchAsync(id);
        }
        
        public int DeleteFromSearch(System.Guid customerId) {
            return base.Channel.DeleteFromSearch(customerId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFromSearchAsync(System.Guid customerId) {
            return base.Channel.DeleteFromSearchAsync(customerId);
        }
        
        public int InsertView(System.Guid branchId, System.Guid customerId) {
            return base.Channel.InsertView(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<int> InsertViewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.InsertViewAsync(branchId, customerId);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromView(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromView(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromViewAsync(System.Guid customerId) {
            return base.Channel.SelectByCustomerIdFromViewAsync(customerId);
        }
        
        public int HaveDateFromView(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveDateFromView(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<int> HaveDateFromViewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveDateFromViewAsync(branchId, customerId);
        }
        
        public int UpdateView(int id) {
            return base.Channel.UpdateView(id);
        }
        
        public System.Threading.Tasks.Task<int> UpdateViewAsync(int id) {
            return base.Channel.UpdateViewAsync(id);
        }
        
        public int DeleteFromView(System.Guid customerId) {
            return base.Channel.DeleteFromView(customerId);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFromViewAsync(System.Guid customerId) {
            return base.Channel.DeleteFromViewAsync(customerId);
        }
        
        public int InsertReview(double rating, string comment, string title, System.Guid customerId, System.Guid branchId) {
            return base.Channel.InsertReview(rating, comment, title, customerId, branchId);
        }
        
        public System.Threading.Tasks.Task<int> InsertReviewAsync(double rating, string comment, string title, System.Guid customerId, System.Guid branchId) {
            return base.Channel.InsertReviewAsync(rating, comment, title, customerId, branchId);
        }
        
        public System.Data.DataSet SelectByBranchIdFromReview(System.Guid id, System.Guid customerId, string sort) {
            return base.Channel.SelectByBranchIdFromReview(id, customerId, sort);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByBranchIdFromReviewAsync(System.Guid id, System.Guid customerId, string sort) {
            return base.Channel.SelectByBranchIdFromReviewAsync(id, customerId, sort);
        }
        
        public System.Data.DataSet SelectAllByBranchIdFromReview(System.Guid id, string sort) {
            return base.Channel.SelectAllByBranchIdFromReview(id, sort);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBranchIdFromReviewAsync(System.Guid id, string sort) {
            return base.Channel.SelectAllByBranchIdFromReviewAsync(id, sort);
        }
        
        public EDP_Project.MyDBServiceReference.Review HaveExistingReview(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveExistingReview(branchId, customerId);
        }
        
        public System.Threading.Tasks.Task<EDP_Project.MyDBServiceReference.Review> HaveExistingReviewAsync(System.Guid branchId, System.Guid customerId) {
            return base.Channel.HaveExistingReviewAsync(branchId, customerId);
        }
        
        public int UpdateReview(int id, string title, string comment, double rating) {
            return base.Channel.UpdateReview(id, title, comment, rating);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReviewAsync(int id, string title, string comment, double rating) {
            return base.Channel.UpdateReviewAsync(id, title, comment, rating);
        }
        
        public int DeleteReview(int id) {
            return base.Channel.DeleteReview(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteReviewAsync(int id) {
            return base.Channel.DeleteReviewAsync(id);
        }
        
        public System.Data.DataSet SelectByCustomerIdFromReview(System.Guid id) {
            return base.Channel.SelectByCustomerIdFromReview(id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByCustomerIdFromReviewAsync(System.Guid id) {
            return base.Channel.SelectByCustomerIdFromReviewAsync(id);
        }
        
        public double SelectRatingByBranchIdFromReview(System.Guid branchId) {
            return base.Channel.SelectRatingByBranchIdFromReview(branchId);
        }
        
        public System.Threading.Tasks.Task<double> SelectRatingByBranchIdFromReviewAsync(System.Guid branchId) {
            return base.Channel.SelectRatingByBranchIdFromReviewAsync(branchId);
        }
        
        public System.Data.DataSet SelectReportedReview() {
            return base.Channel.SelectReportedReview();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectReportedReviewAsync() {
            return base.Channel.SelectReportedReviewAsync();
        }
        
        public int AddNumReportToReview(int id) {
            return base.Channel.AddNumReportToReview(id);
        }
        
        public System.Threading.Tasks.Task<int> AddNumReportToReviewAsync(int id) {
            return base.Channel.AddNumReportToReviewAsync(id);
        }
        
        public int ResetNumReportToReview(int id) {
            return base.Channel.ResetNumReportToReview(id);
        }
        
        public System.Threading.Tasks.Task<int> ResetNumReportToReviewAsync(int id) {
            return base.Channel.ResetNumReportToReviewAsync(id);
        }
    }
}
